Array.length

Array.prototype.concat()
 /**The concat() method is used to merge two or more arrays.
 *This method does not change the existing arrays, but instead returns a new array.
 *const letters = ['a', 'b', 'c'];
 *const numbers = [1, 2, 3];
 *letters.concat(numbers);
 *result in ['a', 'b', 'c', 1, 2, 3]
 */

Array.prototype.every()
/**
 * The every() method tests whether all elements in the array 
 * pass the test implemented by the provided function. 
 * It returns a Boolean value.
 * [12, 5, 8, 130, 44].every(x => x%2 === 0);   // false
*/

Array.prototype.filter()
/**
 * The filter() method creates a new array with all elements that 
 * pass the test implemented by the provided function
 * const words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];
 * const result = words.filter(word => word.length > 6);
 * console.log(result);    
 * expected output: Array ["exuberant", "destruction", "present"]
*/ 

Array.prototype.find()
/**
 * The find() method returns the value of the first element in the provided array that satisfies 
 * the provided testing function. If no values satisfy the testing function, undefined is returned.
 * const array1 = [5, 12, 8, 130, 44];
 * const found = array1.find(element => element > 10);
 * console.log(found);
 * expected output: 12
*/

Array.prototype.findIndex()
/**
 * The findIndex() method returns the index of the first element in the array that satisfies the 
 * provided testing function. Otherwise, it returns -1, indicating that no element passed the test.
 * const array1 = [5, 12, 8, 130, 44];
 * const isLargeNumber = (element) => element > 13;
 * console.log(array1.findIndex(isLargeNumber));
 * expected output: 3
*/

Array.prototype.forEach()
/**
 * The forEach() method executes a provided function once for each array element.
 * const array1 = ['a', 'b', 'c'];
 * array1.forEach(element => console.log(element));
 * expected output: "a"
 * expected output: "b"
 * expected output: "c"
*/

Array.includes()
/**
 * The includes() method determines whether an array includes a certain value among its entries, 
 * returning true or false as appropriate.
 * const array1 = [1, 2, 3];
 * console.log(array1.includes(2));
 * expected output: true
 */

Array.prototype.indexOf()
/**
 * The indexOf() method returns the first index at which a given element can be found 
 * in the array, or -1 if it is not present.
 * const beasts = ['ant', 'bison', 'camel', 'duck', 'bison'];
 * console.log(beasts.indexOf('bison'));
 * expected output: 1
 * start from index 2
 * console.log(beasts.indexOf('bison', 2));
 * expected output: 4
 */

Array.prototype.join()
/**
 * The join() method creates and returns a new string by concatenating all of the elements in an 
 * array (or an array-like object), separated by commas or a specified separator string. If the 
 * array has only one item, then that item will be returned without using the separator.
 * const elements = ['Fire', 'Air', 'Water'];
 * console.log(elements.join());
 * expected output: "Fire,Air,Water"
 * console.log(elements.join(''));
 * expected output: "FireAirWater"
 * console.log(elements.join('-'));
 * expected output: "Fire-Air-Water"
 */

Array.prototype.keys()
/**
 * The keys() method returns a new Array Iterator object that contains the keys for 
 * each index in the array.
 * const array1 = ['a', 'b', 'c'];
 * const iterator = array1.keys();
 * for (const key of iterator) {
 *   console.log(key);
 * }
 * expected output: 0
 * expected output: 1
 * expected output: 2
 */

Array.prototype.lastIndexOf()
/**
 * The lastIndexOf() method returns the last index at which a given element can be found 
 * in the array, or -1 if it is not present. The array is searched backwards, starting at fromIndex.
 * const animals = ['Dodo', 'Tiger', 'Penguin', 'Dodo'];
 * console.log(animals.lastIndexOf('Dodo'));
 * expected output: 3
 * console.log(animals.lastIndexOf('Tiger'));
 * expected output: 1
 */

Array.prototype.map()
/**
 * The map() method creates a new array populated with the results of calling a provided function 
 * on every element in the calling array.
 * const array1 = [1, 4, 9, 16];
 * pass a function to map
 * const map1 = array1.map(x => x * 2);
 * console.log(map1);
 * expected output: Array [2, 8, 18, 32]
 */

Array.of()
/**
 * The Array.of() method creates a new Array instance from a variable number of arguments, 
 * regardless of number or type of the arguments.
 * The difference between Array.of() and the Array constructor is in the handling of integer 
 * arguments: Array.of(7) creates an array with a single element, 7, whereas Array(7) creates an 
 * empty array with a length property of 7 (Note: this implies an array of 7 empty slots, 
 * not slots with actual undefined values).
 * Array.of(7); // [7]
 * Array(7); // array of 7 empty slots
 * Array.of(1, 2, 3); // [1, 2, 3]
 * Array(1, 2, 3);    // [1, 2, 3]
 */

Array.prototype.pop()
/**
 * The pop() method removes the last element from an array and returns that element. 
 * This method changes the length of the array.
 * const plants = ['broccoli', 'cauliflower', 'cabbage', 'kale', 'tomato'];
 * console.log(plants.pop());
 * expected output: "tomato"
 * console.log(plants);
 * expected output: Array ["broccoli", "cauliflower", "cabbage", "kale"]
 * plants.pop();
 * console.log(plants);
 * expected output: Array ["broccoli", "cauliflower", "cabbage"]
 */

Array.prototype.push()
/**
 * The push() method adds one or more elements to the end of an array and returns the 
 * new length of the array.
 * const animals = ['pigs', 'goats', 'sheep'];
 * const count = animals.push('cows');
 * console.log(count);
 * expected output: 4
 * console.log(animals);
 * expected output: Array ["pigs", "goats", "sheep", "cows"]
 * animals.push('chickens', 'cats', 'dogs');
 * console.log(animals);
 * expected output: Array ["pigs", "goats", "sheep", "cows", "chickens", "cats", "dogs"]
 */

Array.prototype.reduce()
/**
 * The reduce() method executes a reducer function (that you provide) on each element of the 
 * array, resulting in single output value.
 * const array1 = [1, 2, 3, 4];
 * const reducer = (accumulator, currentValue) => accumulator + currentValue;
 * 1 + 2 + 3 + 4
 * console.log(array1.reduce(reducer));
 * expected output: 10
 * 5 + 1 + 2 + 3 + 4
 * console.log(array1.reduce(reducer, 5));
 * expected output: 15
 */

Array.prototype.reverse()
/**
 * The reverse() method reverses an array in place. The first array element becomes the last, 
 * and the last array element becomes the first.
 * const array1 = ['one', 'two', 'three'];
 * console.log('array1:', array1);
 * expected output: "array1:" array ["one", "two", "three"]
 * const reversed = array1.reverse();
 * console.log('reversed:', reversed);
 * expected output: "reversed:" Array ["three", "two", "one"]
 * Careful: reverse is destructive -- it changes the original array.
 * console.log('array1:', array1);
 * expected output: "array1:" Array ["three", "two", "one"]
 */

Array.prototype.shift()
/**
 * The shift() method removes the first element from an array and returns that removed 
 * element. This method changes the length of the array.
 * const array1 = [1, 2, 3];
 * const firstElement = array1.shift();
 * console.log(array1);
 * expected output: Array [2, 3]
 * console.log(firstElement);
 * expected output: 1
 */

Array.prototype.slice()
/**
 * The slice() method returns a shallow copy of a portion of an array into a new array object 
 * selected from start to end (end not included) where start and end represent the index 
 * of items in that array. The original array will not be modified.
 * const animals = ['ant', 'bison', 'camel', 'duck', 'elephant'];
 * console.log(animals.slice(2));
 * expected output: Array ["camel", "duck", "elephant"]
 * console.log(animals.slice(2, 4));
 * expected output: Array ["camel", "duck"]
 * console.log(animals.slice(1, 5));
 * expected output: Array ["bison", "camel", "duck", "elephant"]
 */

Array.prototype.some()
/**
 * The some() method tests whether at least one element in the array passes the test implemented 
 * by the provided function. It returns true if, in the array, it finds an element for which 
 * the provided function returns true; otherwise it returns false. It doesn't modify the array.
 * const array = [1, 2, 3, 4, 5];
 * checks whether an element is even
 * const even = (element) => element % 2 === 0;
 * console.log(array.some(even));
 * expected output: true
 */

Array.prototype.sort()
/**
 * The sort() method sorts the elements of an array in place and returns the sorted array. 
 * The default sort order is ascending, built upon converting the elements into strings, 
 * then comparing their sequences of UTF-16 code units values.
 * let numbers = [4, 2, 5, 1, 3];
 * numbers.sort((a, b) => a - b);
 * console.log(numbers);
 * [1, 2, 3, 4, 5]
 */

Array.prototype.splice()
/**
 * The splice() method changes the contents of an array by removing or replacing existing 
 * elements and/or adding new elements in place.
 * const months = ['Jan', 'March', 'April', 'June'];
 * months.splice(1, 0, 'Feb');
 * inserts at index 1
 * console.log(months);
 * expected output: Array ["Jan", "Feb", "March", "April", "June"]
 * months.splice(4, 1, 'May');
 * replaces 1 element at index 4
 * console.log(months);
 * expected output: Array ["Jan", "Feb", "March", "April", "May"]
 */

Array.prototype.toString()
/**
 * The toString() method returns a string representing the specified array and its elements.
 * const array1 = [1, 2, 'a', '1a'];
 * console.log(array1.toString());
 * expected output: "1,2,a,1a"
 */

Array.prototype.unshift()
/**
 * The unshift() method adds one or more elements to the beginning of an array and returns the 
 * new length of the array.
 * const array1 = [1, 2, 3];
 * console.log(array1.unshift(4, 5));
 * expected output: 5
 * console.log(array1);
 * expected output: Array [4, 5, 1, 2, 3]
 */

Array.prototype.values();
/**
 * The values() method returns a new Array Iterator object that contains the values for 
 * each index in the array.
 * const array1 = ['a', 'b', 'c'];
 * const iterator = array1.values();
 * for (const value of iterator) {
 *   console.log(value);
 * }
 * expected output: "a"
 * expected output: "b"
 * expected output: "c"
 */

Object.assign()
/**
 * The Object.assign() method copies all enumerable own properties from one or more source 
 * objects to a target object. It returns the target object.
 * const target = { a: 1, b: 2 };
 * const source = { b: 4, c: 5 };
 * const returnedTarget = Object.assign(target, source);
 * console.log(target);
 * expected output: Object { a: 1, b: 4, c: 5 }
 * console.log(returnedTarget);
 * expected output: Object { a: 1, b: 4, c: 5 }
 */

Object.prototype.hasOwnProperty()
/**
 * The hasOwnProperty() method returns a boolean indicating whether the object has the 
 * specified property as its own property (as opposed to inheriting it).
 * const object1 = {};
 * object1.property1 = 42;
 * console.log(object1.hasOwnProperty('property1'));
 * expected output: true
 * console.log(object1.hasOwnProperty('toString'));
 * expected output: false
 * console.log(object1.hasOwnProperty('hasOwnProperty'));
 * expected output: false
 */

Object.create()
/**
 * The Object.create() method creates a new object, using an existing object as the prototype of 
 * the newly created object.
 * const person = {
 *   isHuman: false,
 *   printIntroduction: function() {
 *     console.log(`My name is ${this.name}. Am I human? ${this.isHuman}`);
 *   }
 * };
 * const me = Object.create(person);
 * me.name = 'Matthew'; // "name" is a property set on "me", but not on "person"
 * me.isHuman = true; // inherited properties can be overwritten
 * me.printIntroduction();
 * expected output: "My name is Matthew. Am I human? true"
 */

Object.defineProperties()
/**
 * The Object.defineProperties() method defines new or modifies existing properties directly 
 * on an object, returning the object.
 * const object1 = {};
 * Object.defineProperties(object1, {
 *   property1: {
 *     value: 42,
 *     writable: true
 *   },
 *   property2: {}
 * });
 * console.log(object1.property1);
 * expected output: 42
 */

Object.entries()
/**
 * The Object.entries() method returns an array of a given object's own enumerable string-keyed 
 * property [key, value] pairs, in the same order as that provided by a for...in loop. 
 * (The only important difference is that a for...in loop enumerates properties in the prototype 
 * chain as well).
 * The order of the array returned by Object.entries() does not depend on how an object is 
 * defined. If there is a need for certain ordering, then the array should be sorted first, like 
 * Object.entries(obj).sort((a, b) => b[0].localeCompare(a[0]));.
 * const object1 = {
 *   a: 'somestring',
 *   b: 42
 * };
 * for (const [key, value] of Object.entries(object1)) {
 *   console.log(`${key}: ${value}`);
 * }
 * expected output:
 * "a: somestring"
 * "b: 42"
 * order is not guaranteed
 */

Object.fromEntries()
/**
 * The Object.fromEntries() method transforms a list of key-value pairs into an object.
 * const entries = new Map([
 *   ['foo', 'bar'],
 *   ['baz', 42]
 * ]);
 * const obj = Object.fromEntries(entries);
 * console.log(obj);
 * expected output: Object { foo: "bar", baz: 42 }
 */

Object.keys()
/**
 * The Object.keys() method returns an array of a given object's own enumerable property 
 * names, iterated in the same order that a normal loop would.
 * const object1 = {
 *   a: 'somestring',
 *   b: 42,
 *   c: false
 * };
 * console.log(Object.keys(object1));
 * expected output: Array ["a", "b", "c"]
 */

Object.values()
/**
 * The Object.values() method returns an array of a given object's own enumerable property values, 
 * in the same order as that provided by a for...in loop. (The only difference is that a for...in 
 * loop enumerates properties in the prototype chain as well.)
 * const object1 = {
 *   a: 'somestring',
 *   b: 42,
 *   c: false
 * };
 * console.log(Object.values(object1));
 * expected output: Array ["somestring", 42, false]
 */

